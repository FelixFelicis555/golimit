// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Key
//  - Count
//  - Expiry
//  - Force
type SyncCommand struct {
	Key    string `thrift:"key,1" db:"key" json:"key"`
	Count  int32  `thrift:"count,2" db:"count" json:"count"`
	Expiry int64  `thrift:"expiry,3" db:"expiry" json:"expiry"`
	Force  bool   `thrift:"force,4" db:"force" json:"force"`
}

func NewSyncCommand() *SyncCommand {
	return &SyncCommand{}
}

func (p *SyncCommand) GetKey() string {
	return p.Key
}

func (p *SyncCommand) GetCount() int32 {
	return p.Count
}

func (p *SyncCommand) GetExpiry() int64 {
	return p.Expiry
}

func (p *SyncCommand) GetForce() bool {
	return p.Force
}
func (p *SyncCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SyncCommand) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SyncCommand) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *SyncCommand) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Expiry = v
	}
	return nil
}

func (p *SyncCommand) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Force = v
	}
	return nil
}

func (p *SyncCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SyncCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *SyncCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *SyncCommand) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expiry", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expiry: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Expiry)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expiry (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expiry: ", p), err)
	}
	return err
}

func (p *SyncCommand) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("force", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:force: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Force)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.force (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:force: ", p), err)
	}
	return err
}

func (p *SyncCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncCommand(%+v)", *p)
}

type StoreNode interface {
	// Parameters:
	//  - Syncs
	SyncKeys(syncs []*SyncCommand) (err error)
	// Parameters:
	//  - Key
	//  - Threshold
	//  - Window
	//  - Peakaveraged
	SyncRateConfig(key string, threshold int32, window int32, peakaveraged bool) (err error)
	// Parameters:
	//  - Key
	//  - Count
	//  - Threshold
	//  - Window
	//  - Peakaveraged
	IncrAction(key string, count int32, threshold int32, window int32, peakaveraged bool) (r bool, err error)
	// Parameters:
	//  - Key
	//  - Count
	RateLimitGlobalAction(key string, count int32) (r bool, err error)
}

type StoreNodeClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewStoreNodeClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StoreNodeClient {
	return &StoreNodeClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewStoreNodeClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StoreNodeClient {
	return &StoreNodeClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Syncs
func (p *StoreNodeClient) SyncKeys(syncs []*SyncCommand) (err error) {
	if err = p.sendSyncKeys(syncs); err != nil {
		return
	}
	return p.recvSyncKeys()
}

func (p *StoreNodeClient) sendSyncKeys(syncs []*SyncCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SyncKeys", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreNodeSyncKeysArgs{
		Syncs: syncs,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StoreNodeClient) recvSyncKeys() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SyncKeys" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SyncKeys failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SyncKeys failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SyncKeys failed: invalid message type")
		return
	}
	result := StoreNodeSyncKeysResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Key
//  - Threshold
//  - Window
//  - Peakaveraged
func (p *StoreNodeClient) SyncRateConfig(key string, threshold int32, window int32, peakaveraged bool) (err error) {
	if err = p.sendSyncRateConfig(key, threshold, window, peakaveraged); err != nil {
		return
	}
	return p.recvSyncRateConfig()
}

func (p *StoreNodeClient) sendSyncRateConfig(key string, threshold int32, window int32, peakaveraged bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SyncRateConfig", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreNodeSyncRateConfigArgs{
		Key:          key,
		Threshold:    threshold,
		Window:       window,
		Peakaveraged: peakaveraged,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StoreNodeClient) recvSyncRateConfig() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SyncRateConfig" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SyncRateConfig failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SyncRateConfig failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SyncRateConfig failed: invalid message type")
		return
	}
	result := StoreNodeSyncRateConfigResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Key
//  - Count
//  - Threshold
//  - Window
//  - Peakaveraged
func (p *StoreNodeClient) IncrAction(key string, count int32, threshold int32, window int32, peakaveraged bool) (r bool, err error) {
	if err = p.sendIncrAction(key, count, threshold, window, peakaveraged); err != nil {
		return
	}
	return p.recvIncrAction()
}

func (p *StoreNodeClient) sendIncrAction(key string, count int32, threshold int32, window int32, peakaveraged bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("IncrAction", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreNodeIncrActionArgs{
		Key:          key,
		Count:        count,
		Threshold:    threshold,
		Window:       window,
		Peakaveraged: peakaveraged,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StoreNodeClient) recvIncrAction() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "IncrAction" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "IncrAction failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "IncrAction failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "IncrAction failed: invalid message type")
		return
	}
	result := StoreNodeIncrActionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Count
func (p *StoreNodeClient) RateLimitGlobalAction(key string, count int32) (r bool, err error) {
	if err = p.sendRateLimitGlobalAction(key, count); err != nil {
		return
	}
	return p.recvRateLimitGlobalAction()
}

func (p *StoreNodeClient) sendRateLimitGlobalAction(key string, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RateLimitGlobalAction", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreNodeRateLimitGlobalActionArgs{
		Key:   key,
		Count: count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StoreNodeClient) recvRateLimitGlobalAction() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RateLimitGlobalAction" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RateLimitGlobalAction failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RateLimitGlobalAction failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RateLimitGlobalAction failed: invalid message type")
		return
	}
	result := StoreNodeRateLimitGlobalActionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type StoreNodeProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      StoreNode
}

func (p *StoreNodeProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *StoreNodeProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *StoreNodeProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewStoreNodeProcessor(handler StoreNode) *StoreNodeProcessor {

	self8 := &StoreNodeProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["SyncKeys"] = &storeNodeProcessorSyncKeys{handler: handler}
	self8.processorMap["SyncRateConfig"] = &storeNodeProcessorSyncRateConfig{handler: handler}
	self8.processorMap["IncrAction"] = &storeNodeProcessorIncrAction{handler: handler}
	self8.processorMap["RateLimitGlobalAction"] = &storeNodeProcessorRateLimitGlobalAction{handler: handler}
	return self8
}

func (p *StoreNodeProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x9

}

type storeNodeProcessorSyncKeys struct {
	handler StoreNode
}

func (p *storeNodeProcessorSyncKeys) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreNodeSyncKeysArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SyncKeys", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreNodeSyncKeysResult{}
	var err2 error
	if err2 = p.handler.SyncKeys(args.Syncs); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncKeys: "+err2.Error())
		oprot.WriteMessageBegin("SyncKeys", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("SyncKeys", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type storeNodeProcessorSyncRateConfig struct {
	handler StoreNode
}

func (p *storeNodeProcessorSyncRateConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreNodeSyncRateConfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SyncRateConfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreNodeSyncRateConfigResult{}
	var err2 error
	if err2 = p.handler.SyncRateConfig(args.Key, args.Threshold, args.Window, args.Peakaveraged); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncRateConfig: "+err2.Error())
		oprot.WriteMessageBegin("SyncRateConfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("SyncRateConfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type storeNodeProcessorIncrAction struct {
	handler StoreNode
}

func (p *storeNodeProcessorIncrAction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreNodeIncrActionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IncrAction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreNodeIncrActionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IncrAction(args.Key, args.Count, args.Threshold, args.Window, args.Peakaveraged); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IncrAction: "+err2.Error())
		oprot.WriteMessageBegin("IncrAction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("IncrAction", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type storeNodeProcessorRateLimitGlobalAction struct {
	handler StoreNode
}

func (p *storeNodeProcessorRateLimitGlobalAction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreNodeRateLimitGlobalActionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RateLimitGlobalAction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreNodeRateLimitGlobalActionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RateLimitGlobalAction(args.Key, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RateLimitGlobalAction: "+err2.Error())
		oprot.WriteMessageBegin("RateLimitGlobalAction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("RateLimitGlobalAction", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Syncs
type StoreNodeSyncKeysArgs struct {
	Syncs []*SyncCommand `thrift:"syncs,1" db:"syncs" json:"syncs"`
}

func NewStoreNodeSyncKeysArgs() *StoreNodeSyncKeysArgs {
	return &StoreNodeSyncKeysArgs{}
}

func (p *StoreNodeSyncKeysArgs) GetSyncs() []*SyncCommand {
	return p.Syncs
}
func (p *StoreNodeSyncKeysArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeSyncKeysArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SyncCommand, 0, size)
	p.Syncs = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &SyncCommand{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Syncs = append(p.Syncs, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StoreNodeSyncKeysArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncKeys_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeSyncKeysArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncs", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Syncs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Syncs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncs: ", p), err)
	}
	return err
}

func (p *StoreNodeSyncKeysArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeSyncKeysArgs(%+v)", *p)
}

type StoreNodeSyncKeysResult struct {
}

func NewStoreNodeSyncKeysResult() *StoreNodeSyncKeysResult {
	return &StoreNodeSyncKeysResult{}
}

func (p *StoreNodeSyncKeysResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeSyncKeysResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncKeys_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeSyncKeysResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeSyncKeysResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Threshold
//  - Window
//  - Peakaveraged
type StoreNodeSyncRateConfigArgs struct {
	Key          string `thrift:"key,1" db:"key" json:"key"`
	Threshold    int32  `thrift:"threshold,2" db:"threshold" json:"threshold"`
	Window       int32  `thrift:"window,3" db:"window" json:"window"`
	Peakaveraged bool   `thrift:"peakaveraged,4" db:"peakaveraged" json:"peakaveraged"`
}

func NewStoreNodeSyncRateConfigArgs() *StoreNodeSyncRateConfigArgs {
	return &StoreNodeSyncRateConfigArgs{}
}

func (p *StoreNodeSyncRateConfigArgs) GetKey() string {
	return p.Key
}

func (p *StoreNodeSyncRateConfigArgs) GetThreshold() int32 {
	return p.Threshold
}

func (p *StoreNodeSyncRateConfigArgs) GetWindow() int32 {
	return p.Window
}

func (p *StoreNodeSyncRateConfigArgs) GetPeakaveraged() bool {
	return p.Peakaveraged
}
func (p *StoreNodeSyncRateConfigArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeSyncRateConfigArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *StoreNodeSyncRateConfigArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Threshold = v
	}
	return nil
}

func (p *StoreNodeSyncRateConfigArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Window = v
	}
	return nil
}

func (p *StoreNodeSyncRateConfigArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Peakaveraged = v
	}
	return nil
}

func (p *StoreNodeSyncRateConfigArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncRateConfig_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeSyncRateConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *StoreNodeSyncRateConfigArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threshold", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:threshold: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Threshold)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threshold (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:threshold: ", p), err)
	}
	return err
}

func (p *StoreNodeSyncRateConfigArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("window", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:window: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Window)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.window (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:window: ", p), err)
	}
	return err
}

func (p *StoreNodeSyncRateConfigArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("peakaveraged", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:peakaveraged: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Peakaveraged)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.peakaveraged (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:peakaveraged: ", p), err)
	}
	return err
}

func (p *StoreNodeSyncRateConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeSyncRateConfigArgs(%+v)", *p)
}

type StoreNodeSyncRateConfigResult struct {
}

func NewStoreNodeSyncRateConfigResult() *StoreNodeSyncRateConfigResult {
	return &StoreNodeSyncRateConfigResult{}
}

func (p *StoreNodeSyncRateConfigResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeSyncRateConfigResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncRateConfig_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeSyncRateConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeSyncRateConfigResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Count
//  - Threshold
//  - Window
//  - Peakaveraged
type StoreNodeIncrActionArgs struct {
	Key          string `thrift:"key,1" db:"key" json:"key"`
	Count        int32  `thrift:"count,2" db:"count" json:"count"`
	Threshold    int32  `thrift:"threshold,3" db:"threshold" json:"threshold"`
	Window       int32  `thrift:"window,4" db:"window" json:"window"`
	Peakaveraged bool   `thrift:"peakaveraged,5" db:"peakaveraged" json:"peakaveraged"`
}

func NewStoreNodeIncrActionArgs() *StoreNodeIncrActionArgs {
	return &StoreNodeIncrActionArgs{}
}

func (p *StoreNodeIncrActionArgs) GetKey() string {
	return p.Key
}

func (p *StoreNodeIncrActionArgs) GetCount() int32 {
	return p.Count
}

func (p *StoreNodeIncrActionArgs) GetThreshold() int32 {
	return p.Threshold
}

func (p *StoreNodeIncrActionArgs) GetWindow() int32 {
	return p.Window
}

func (p *StoreNodeIncrActionArgs) GetPeakaveraged() bool {
	return p.Peakaveraged
}
func (p *StoreNodeIncrActionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeIncrActionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *StoreNodeIncrActionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *StoreNodeIncrActionArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Threshold = v
	}
	return nil
}

func (p *StoreNodeIncrActionArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Window = v
	}
	return nil
}

func (p *StoreNodeIncrActionArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Peakaveraged = v
	}
	return nil
}

func (p *StoreNodeIncrActionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IncrAction_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeIncrActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *StoreNodeIncrActionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *StoreNodeIncrActionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threshold", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:threshold: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Threshold)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threshold (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:threshold: ", p), err)
	}
	return err
}

func (p *StoreNodeIncrActionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("window", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:window: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Window)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.window (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:window: ", p), err)
	}
	return err
}

func (p *StoreNodeIncrActionArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("peakaveraged", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:peakaveraged: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Peakaveraged)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.peakaveraged (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:peakaveraged: ", p), err)
	}
	return err
}

func (p *StoreNodeIncrActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeIncrActionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StoreNodeIncrActionResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStoreNodeIncrActionResult() *StoreNodeIncrActionResult {
	return &StoreNodeIncrActionResult{}
}

var StoreNodeIncrActionResult_Success_DEFAULT bool

func (p *StoreNodeIncrActionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return StoreNodeIncrActionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *StoreNodeIncrActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StoreNodeIncrActionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeIncrActionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *StoreNodeIncrActionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IncrAction_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeIncrActionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StoreNodeIncrActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeIncrActionResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Count
type StoreNodeRateLimitGlobalActionArgs struct {
	Key   string `thrift:"key,1" db:"key" json:"key"`
	Count int32  `thrift:"count,2" db:"count" json:"count"`
}

func NewStoreNodeRateLimitGlobalActionArgs() *StoreNodeRateLimitGlobalActionArgs {
	return &StoreNodeRateLimitGlobalActionArgs{}
}

func (p *StoreNodeRateLimitGlobalActionArgs) GetKey() string {
	return p.Key
}

func (p *StoreNodeRateLimitGlobalActionArgs) GetCount() int32 {
	return p.Count
}
func (p *StoreNodeRateLimitGlobalActionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeRateLimitGlobalActionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *StoreNodeRateLimitGlobalActionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *StoreNodeRateLimitGlobalActionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RateLimitGlobalAction_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeRateLimitGlobalActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *StoreNodeRateLimitGlobalActionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *StoreNodeRateLimitGlobalActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeRateLimitGlobalActionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StoreNodeRateLimitGlobalActionResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStoreNodeRateLimitGlobalActionResult() *StoreNodeRateLimitGlobalActionResult {
	return &StoreNodeRateLimitGlobalActionResult{}
}

var StoreNodeRateLimitGlobalActionResult_Success_DEFAULT bool

func (p *StoreNodeRateLimitGlobalActionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return StoreNodeRateLimitGlobalActionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *StoreNodeRateLimitGlobalActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StoreNodeRateLimitGlobalActionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreNodeRateLimitGlobalActionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *StoreNodeRateLimitGlobalActionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RateLimitGlobalAction_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreNodeRateLimitGlobalActionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StoreNodeRateLimitGlobalActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreNodeRateLimitGlobalActionResult(%+v)", *p)
}
